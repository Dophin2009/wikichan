!function(t){var e={};function r(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=e,r.d=function(t,e,s){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(s,n,function(e){return t[e]}.bind(null,n));return s},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);class s{constructor(t,e){this._key=t,this._value=e}get key(){return this._key}set key(t){this._key=t}get value(){return this._value}set value(t){this._value=t}}class n{constructor(t,e){this.endpoint=t,this.params=new Array,this._type=e,this.addParam("origin","*").addParam("format","json")}addParam(t,e){const r=new s(t,e);return this.params.push(r),this}get url(){let t=this.endpoint;return this.params.forEach(e=>{t+=e.key+"="+e.value+"&"}),t}get type(){return this._type}}var o;!function(t){t[t.EXTRACT=0]="EXTRACT"}(o||(o={}));class i{constructor(){this._redirects=[],this._pages=[]}addRedirect(t){this._redirects.push(t)}addPage(t){this._pages.push(t)}get redirects(){return this._redirects}get pages(){return this._pages}static fromJson(t){const e=new i;return t.normalized&&t.normalized.forEach(t=>{e.addRedirect(u.fromJson(t))}),t.redirects&&t.redirects.forEach(t=>{e.addRedirect(u.fromJson(t))}),Object.keys(t.pages).forEach((r,s)=>{+r<0||e.addPage(a.fromJson(t.pages[r]))}),e}}class a{constructor(){}get id(){return this._id}get title(){return this._title}get summary(){return this._summary}static fromJson(t){const e=new a;return e._id=t.pageid,e._title=t.title,e._summary=t.extract,e}}class u{constructor(){}get from(){return this._from}get to(){return this._to}static fromJson(t){const e=new u;return e._from=t.from,e._to=t.to,e}}var c=function(t,e,r,s){return new(r||(r=Promise))(function(n,o){function i(t){try{u(s.next(t))}catch(t){o(t)}}function a(t){try{u(s.throw(t))}catch(t){o(t)}}function u(t){t.done?n(t.value):new r(function(e){e(t.value)}).then(i,a)}u((s=s.apply(t,e||[])).next())})};class h{constructor(){this.endpoint="https://en.wikipedia.org/w/api.php?"}fetchExtract(t){return c(this,void 0,void 0,function*(){const e=this.constructQuery(t,o.EXTRACT);return new Promise(function(t,r){const s=new XMLHttpRequest;s.open("GET",e.url),s.setRequestHeader("Content-Type","application/json; charset=UTF-8"),s.onloadend=function(){if(this.status>=200&&this.status<300){const e=JSON.parse(this.responseText).query;if(-1!==Object.keys(e.pages).indexOf("-1")&&1===Object.keys(e.pages).length)return;console.log(e.pages);const r=i.fromJson(e);t(r)}else r({status:this.status,statusText:this.statusText})},s.onerror=function(){r({status:this.status,statusText:this.statusText})},s.send()})})}constructQuery(t,e){let r=new n(this.endpoint,e);return r.addParam("action","query").addParam("prop","info|extracts&exchars=500").addParam("inprop","url").addParam("redirects","1").addParam("titles",t),r}}class d{constructor(t,e){this._leftNode=t,this._rightNode=t,this._text=t.textContent,this._offset=e}phrase(t,e){let r,s,n=this.offset;for(let e=0;e<t+1;e++){for(;n>0&&(n--," "!==this.text[n]););n<0&&this.joinBefore()}r=n,n=this.offset;for(let t=0;t<e+1;t++){for(;n<this.text.length&&(n++," "!==this.text[n]););n>this.text.length&&this.joinAfter()}return s=n,this.cleanString(this.text.substring(r,s))}cleanString(t){return t.replace("/[.,/#!$%^&*;:{}=-_`~()]/g","").trim()}joinAfter(){var t;this.rightNode=null===(t=this.rightNode).nextSibling?t.parentNode.nextSibling:t.nextSibling,this.addAfter(this.rightNode.textContent)}joinBefore(){var t;this.leftNode=null===(t=this.leftNode).previousSibling?t.parentNode.previousSibling:t.previousSibling,this.addBefore(this.leftNode.textContent)}addAfter(t){this.text+=t}addBefore(t){this.text=t+this.text,this.offset+=t.length}get text(){return this._text}set text(t){this._text=t}get offset(){return this._offset}set offset(t){this._offset=t}get leftNode(){return this._leftNode}set leftNode(t){this._leftNode=t}get rightNode(){return this._rightNode}set rightNode(t){this._rightNode=t}}class f{getSourceUnderCursor(t){const e=document.caretPositionFromPoint(t.clientX,t.clientY),r=e.offsetNode,s=e.offset;return new d(r,s)}}(new class{constructor(){this.wikic=new h,this.selector=new f}prepare(){window.addEventListener("mousedown",this.onMouseOver.bind(this))}onMouseOver(t){const e=this.selector.getSourceUnderCursor(t);for(let t=0;t<4;t++)for(let r=0;r<4;r++)this.wikic.fetchExtract(e.phrase(t,r)).then(function(t){},function(t){console.log(t.stack)})}}).prepare()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9wYXJhbXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9xdWVyeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL3Jlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcGkvd2lraWFwaS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZG9jLWJpbmQvdGV4dC1zb3VyY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RvYy1iaW5kL3RleHQtc2VsZWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dpa2ljaGFuLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiV2lraVF1ZXJ5UGFyYW1zIiwiW29iamVjdCBPYmplY3RdIiwidGhpcyIsIl9rZXkiLCJfdmFsdWUiLCJxdWVyeV9XaWtpUXVlcnkiLCJlbmRwb2ludCIsInR5cGUiLCJwYXJhbXMiLCJBcnJheSIsIl90eXBlIiwiYWRkUGFyYW0iLCJwYXJhbSIsInB1c2giLCJ1cmwiLCJxdWVyeSIsImZvckVhY2giLCJXaWtpUXVlcnlUeXBlIiwiV2lraVJlc3BvbnNlIiwiX3JlZGlyZWN0cyIsIl9wYWdlcyIsInJlZGlyZWN0cyIsInBhZ2VzIiwianNvbiIsInJlcyIsIm5vcm1hbGl6ZWQiLCJhZGRSZWRpcmVjdCIsIldpa2lSZWRpcmVjdCIsImZyb21Kc29uIiwia2V5cyIsImsiLCJ2IiwiYWRkUGFnZSIsIldpa2lQYWdlIiwiaWQiLCJfaWQiLCJ0aXRsZSIsIl90aXRsZSIsInN1bW1hcnkiLCJfc3VtbWFyeSIsInBhZ2VpZCIsImV4dHJhY3QiLCJmcm9tIiwiX2Zyb20iLCJ0byIsIl90byIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5Iiwid2lraWFwaV9XaWtpQXBpIiwiYXJ0aWNsZU5hbWUiLCJjb25zdHJ1Y3RRdWVyeSIsIkVYVFJBQ1QiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25sb2FkZW5kIiwic3RhdHVzIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiaW5kZXhPZiIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJyZXNwb25zZSIsInN0YXR1c1RleHQiLCJvbmVycm9yIiwic2VuZCIsImFydGljbGUiLCJUZXh0U291cmNlIiwibm9kZSIsIm9mZnNldCIsIl9sZWZ0Tm9kZSIsIl9yaWdodE5vZGUiLCJfdGV4dCIsInRleHRDb250ZW50IiwiX29mZnNldCIsImJlZm9yZSIsImFmdGVyIiwiYmVnaW4iLCJlbmQiLCJ0ZXh0Iiwiam9pbkJlZm9yZSIsImpvaW5BZnRlciIsImNsZWFuU3RyaW5nIiwic3Vic3RyaW5nIiwicmVwbGFjZSIsInRyaW0iLCJyaWdodE5vZGUiLCJuZXh0U2libGluZyIsInBhcmVudE5vZGUiLCJhZGRBZnRlciIsImxlZnROb2RlIiwicHJldmlvdXNTaWJsaW5nIiwiYWRkQmVmb3JlIiwidGV4dF9zZWxlY3Rvcl9UZXh0U2VsZWN0b3IiLCJldmVudCIsInJhbmdlIiwiZG9jdW1lbnQiLCJjYXJldFBvc2l0aW9uRnJvbVBvaW50IiwiY2xpZW50WCIsImNsaWVudFkiLCJ0ZXh0Tm9kZSIsIm9mZnNldE5vZGUiLCJ3aWtpYyIsInNlbGVjdG9yIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uTW91c2VPdmVyIiwic291cmNlIiwiZ2V0U291cmNlVW5kZXJDdXJzb3IiLCJmZXRjaEV4dHJhY3QiLCJwaHJhc2UiLCJzdGFjayIsInByZXBhcmUiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFr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QUF3RCxHQUNBLE1BQUFvRSxFQUFBM0gsS0FBQXVILFNBQUFLLHFCQUFBckUsR0FFQSxRQUFBb0MsRUFBQSxFQUE0QkEsRUFBQSxFQUFZQSxJQUN4QyxRQUFBQyxFQUFBLEVBQStCQSxFQUFBLEVBQVdBLElBQzFDNUYsS0FBQXNILE1BQUFPLGFBQUFGLEVBQUFHLE9BQUFuQyxFQUFBQyxJQUNBakMsS0FBQSxTQUFBckMsS0FHaUIsU0FBQWlDLEdBQ2pCcUIsUUFBQUMsSUFBQXRCLEVBQUF3RSxZQU9BQyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJleHBvcnQgY2xhc3MgV2lraVF1ZXJ5UGFyYW1zIHtcclxuICAgIGNvbnN0cnVjdG9yKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9rZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGdldCBrZXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleTtcclxuICAgIH1cclxuICAgIHNldCBrZXkodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9rZXkgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFdpa2lRdWVyeVBhcmFtcyB9IGZyb20gJy4vcGFyYW1zJztcclxuZXhwb3J0IGNsYXNzIFdpa2lRdWVyeSB7XHJcbiAgICBjb25zdHJ1Y3RvcihlbmRwb2ludCwgdHlwZSkge1xyXG4gICAgICAgIHRoaXMuZW5kcG9pbnQgPSBlbmRwb2ludDtcclxuICAgICAgICB0aGlzLnBhcmFtcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMuYWRkUGFyYW0oJ29yaWdpbicsICcqJylcclxuICAgICAgICAgICAgLmFkZFBhcmFtKCdmb3JtYXQnLCAnanNvbicpO1xyXG4gICAgfVxyXG4gICAgYWRkUGFyYW0oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IHBhcmFtID0gbmV3IFdpa2lRdWVyeVBhcmFtcyhrZXksIHZhbHVlKTtcclxuICAgICAgICB0aGlzLnBhcmFtcy5wdXNoKHBhcmFtKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGdldCB1cmwoKSB7XHJcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5lbmRwb2ludDtcclxuICAgICAgICB0aGlzLnBhcmFtcy5mb3JFYWNoKHAgPT4ge1xyXG4gICAgICAgICAgICBxdWVyeSArPSBwLmtleSArIFwiPVwiICsgcC52YWx1ZSArIFwiJlwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBxdWVyeTtcclxuICAgIH1cclxuICAgIGdldCB0eXBlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCB2YXIgV2lraVF1ZXJ5VHlwZTtcclxuKGZ1bmN0aW9uIChXaWtpUXVlcnlUeXBlKSB7XHJcbiAgICBXaWtpUXVlcnlUeXBlW1dpa2lRdWVyeVR5cGVbXCJFWFRSQUNUXCJdID0gMF0gPSBcIkVYVFJBQ1RcIjtcclxufSkoV2lraVF1ZXJ5VHlwZSB8fCAoV2lraVF1ZXJ5VHlwZSA9IHt9KSk7XHJcbiIsImV4cG9ydCBjbGFzcyBXaWtpUmVzcG9uc2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fcmVkaXJlY3RzID0gW107XHJcbiAgICAgICAgdGhpcy5fcGFnZXMgPSBbXTtcclxuICAgIH1cclxuICAgIGFkZFJlZGlyZWN0KHIpIHtcclxuICAgICAgICB0aGlzLl9yZWRpcmVjdHMucHVzaChyKTtcclxuICAgIH1cclxuICAgIGFkZFBhZ2UocCkge1xyXG4gICAgICAgIHRoaXMuX3BhZ2VzLnB1c2gocCk7XHJcbiAgICB9XHJcbiAgICBnZXQgcmVkaXJlY3RzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWRpcmVjdHM7XHJcbiAgICB9XHJcbiAgICBnZXQgcGFnZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhZ2VzO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGZyb21Kc29uKGpzb24pIHtcclxuICAgICAgICBjb25zdCByZXMgPSBuZXcgV2lraVJlc3BvbnNlKCk7XHJcbiAgICAgICAgaWYgKGpzb24ubm9ybWFsaXplZCkge1xyXG4gICAgICAgICAgICBqc29uLm5vcm1hbGl6ZWQuZm9yRWFjaChuID0+IHtcclxuICAgICAgICAgICAgICAgIHJlcy5hZGRSZWRpcmVjdChXaWtpUmVkaXJlY3QuZnJvbUpzb24obikpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGpzb24ucmVkaXJlY3RzKSB7XHJcbiAgICAgICAgICAgIGpzb24ucmVkaXJlY3RzLmZvckVhY2gociA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXMuYWRkUmVkaXJlY3QoV2lraVJlZGlyZWN0LmZyb21Kc29uKHIpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5rZXlzKGpzb24ucGFnZXMpLmZvckVhY2goKGssIHYpID0+IHtcclxuICAgICAgICAgICAgaWYgKCtrIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlcy5hZGRQYWdlKFdpa2lQYWdlLmZyb21Kc29uKGpzb24ucGFnZXNba10pKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBXaWtpUGFnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG4gICAgZ2V0IGlkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuICAgIGdldCB0aXRsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGl0bGU7XHJcbiAgICB9XHJcbiAgICBnZXQgc3VtbWFyeSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3VtbWFyeTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBmcm9tSnNvbihqc29uKSB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gbmV3IFdpa2lQYWdlKCk7XHJcbiAgICAgICAgcmVzLl9pZCA9IGpzb24ucGFnZWlkO1xyXG4gICAgICAgIHJlcy5fdGl0bGUgPSBqc29uLnRpdGxlO1xyXG4gICAgICAgIHJlcy5fc3VtbWFyeSA9IGpzb24uZXh0cmFjdDtcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIFdpa2lSZWRpcmVjdCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG4gICAgZ2V0IGZyb20oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zyb207XHJcbiAgICB9XHJcbiAgICBnZXQgdG8oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RvO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGZyb21Kc29uKGpzb24pIHtcclxuICAgICAgICBjb25zdCByZXMgPSBuZXcgV2lraVJlZGlyZWN0KCk7XHJcbiAgICAgICAgcmVzLl9mcm9tID0ganNvbi5mcm9tO1xyXG4gICAgICAgIHJlcy5fdG8gPSBqc29uLnRvO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbn1cclxuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuaW1wb3J0IHsgV2lraVF1ZXJ5VHlwZSwgV2lraVF1ZXJ5IH0gZnJvbSAnLi9xdWVyeSc7XHJcbmltcG9ydCB7IFdpa2lSZXNwb25zZSB9IGZyb20gJy4vcmVzcG9uc2UnO1xyXG5leHBvcnQgY2xhc3MgV2lraUFwaSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmVuZHBvaW50ID0gJ2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93L2FwaS5waHA/JztcclxuICAgIH1cclxuICAgIGZldGNoRXh0cmFjdChhcnRpY2xlTmFtZSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5jb25zdHJ1Y3RRdWVyeShhcnRpY2xlTmFtZSwgV2lraVF1ZXJ5VHlwZS5FWFRSQUNUKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgICAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIHF1ZXJ5LnVybCk7XHJcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnKTtcclxuICAgICAgICAgICAgICAgIHhoci5vbmxvYWRlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBqc29uID0gSlNPTi5wYXJzZSh0aGlzLnJlc3BvbnNlVGV4dCkucXVlcnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhqc29uLnBhZ2VzKS5pbmRleE9mKFwiLTFcIikgIT09IC0xICYmIE9iamVjdC5rZXlzKGpzb24ucGFnZXMpLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGpzb24ucGFnZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IFdpa2lSZXNwb25zZS5mcm9tSnNvbihqc29uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3Qoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgeGhyLnNlbmQoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBUT0RPOiBSZWZhY3RvciBmb3IgZGlmZmVyZW50IHR5cGVzIG9mIHF1ZXJpZXNcclxuICAgIGNvbnN0cnVjdFF1ZXJ5KGFydGljbGUsIHR5cGUpIHtcclxuICAgICAgICBsZXQgcXVlcnkgPSBuZXcgV2lraVF1ZXJ5KHRoaXMuZW5kcG9pbnQsIHR5cGUpO1xyXG4gICAgICAgIHF1ZXJ5LmFkZFBhcmFtKCdhY3Rpb24nLCAncXVlcnknKVxyXG4gICAgICAgICAgICAuYWRkUGFyYW0oJ3Byb3AnLCAnaW5mb3xleHRyYWN0cyZleGNoYXJzPTUwMCcpXHJcbiAgICAgICAgICAgIC5hZGRQYXJhbSgnaW5wcm9wJywgJ3VybCcpXHJcbiAgICAgICAgICAgIC5hZGRQYXJhbSgncmVkaXJlY3RzJywgJzEnKVxyXG4gICAgICAgICAgICAuYWRkUGFyYW0oJ3RpdGxlcycsIGFydGljbGUpO1xyXG4gICAgICAgIHJldHVybiBxdWVyeTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgVGV4dFNvdXJjZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihub2RlLCBvZmZzZXQpIHtcclxuICAgICAgICB0aGlzLl9sZWZ0Tm9kZSA9IG5vZGU7XHJcbiAgICAgICAgdGhpcy5fcmlnaHROb2RlID0gbm9kZTtcclxuICAgICAgICB0aGlzLl90ZXh0ID0gbm9kZS50ZXh0Q29udGVudDtcclxuICAgICAgICB0aGlzLl9vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICB9XHJcbiAgICBwaHJhc2UoYmVmb3JlLCBhZnRlcikge1xyXG4gICAgICAgIGxldCBpID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgbGV0IGJlZ2luO1xyXG4gICAgICAgIGxldCBlbmQ7XHJcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBiZWZvcmUgKyAxOyBrKyspIHtcclxuICAgICAgICAgICAgd2hpbGUgKGkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50ZXh0W2ldID09PSBcIiBcIilcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaSA8IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuam9pbkJlZm9yZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJlZ2luID0gaTtcclxuICAgICAgICBpID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBhZnRlciArIDE7IGsrKykge1xyXG4gICAgICAgICAgICB3aGlsZSAoaSA8IHRoaXMudGV4dC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRleHRbaV0gPT09IFwiIFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpID4gdGhpcy50ZXh0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5qb2luQWZ0ZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbmQgPSBpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNsZWFuU3RyaW5nKHRoaXMudGV4dC5zdWJzdHJpbmcoYmVnaW4sIGVuZCkpO1xyXG4gICAgfVxyXG4gICAgY2xlYW5TdHJpbmcocykge1xyXG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoXCIvWy4sXFwvIyEkJVxcXiZcXCo7Ont9PVxcLV9gfigpXS9nXCIsIFwiXCIpLnRyaW0oKTtcclxuICAgIH1cclxuICAgIGpvaW5BZnRlcigpIHtcclxuICAgICAgICB0aGlzLnJpZ2h0Tm9kZSA9IGdldE5leHROb2RlKHRoaXMucmlnaHROb2RlKTtcclxuICAgICAgICB0aGlzLmFkZEFmdGVyKHRoaXMucmlnaHROb2RlLnRleHRDb250ZW50KTtcclxuICAgIH1cclxuICAgIGpvaW5CZWZvcmUoKSB7XHJcbiAgICAgICAgdGhpcy5sZWZ0Tm9kZSA9IGdldFByZXZpb3VzTm9kZSh0aGlzLmxlZnROb2RlKTtcclxuICAgICAgICB0aGlzLmFkZEJlZm9yZSh0aGlzLmxlZnROb2RlLnRleHRDb250ZW50KTtcclxuICAgIH1cclxuICAgIGFkZEFmdGVyKHRleHQpIHtcclxuICAgICAgICB0aGlzLnRleHQgKz0gdGV4dDtcclxuICAgIH1cclxuICAgIGFkZEJlZm9yZSh0ZXh0KSB7XHJcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dCArIHRoaXMudGV4dDtcclxuICAgICAgICB0aGlzLm9mZnNldCArPSB0ZXh0Lmxlbmd0aDtcclxuICAgIH1cclxuICAgIGdldCB0ZXh0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90ZXh0O1xyXG4gICAgfVxyXG4gICAgc2V0IHRleHQodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl90ZXh0ID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBnZXQgb2Zmc2V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vZmZzZXQ7XHJcbiAgICB9XHJcbiAgICBzZXQgb2Zmc2V0KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBnZXQgbGVmdE5vZGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlZnROb2RlO1xyXG4gICAgfVxyXG4gICAgc2V0IGxlZnROb2RlKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fbGVmdE5vZGUgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGdldCByaWdodE5vZGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JpZ2h0Tm9kZTtcclxuICAgIH1cclxuICAgIHNldCByaWdodE5vZGUodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9yaWdodE5vZGUgPSB2YWx1ZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXROZXh0Tm9kZShub2RlKSB7XHJcbiAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZyA9PT0gbnVsbCA/IG5vZGUucGFyZW50Tm9kZS5uZXh0U2libGluZyA6IG5vZGUubmV4dFNpYmxpbmc7XHJcbn1cclxuZnVuY3Rpb24gZ2V0UHJldmlvdXNOb2RlKG5vZGUpIHtcclxuICAgIHJldHVybiBub2RlLnByZXZpb3VzU2libGluZyA9PT0gbnVsbCA/IG5vZGUucGFyZW50Tm9kZS5wcmV2aW91c1NpYmxpbmcgOiBub2RlLnByZXZpb3VzU2libGluZztcclxufVxyXG4iLCJpbXBvcnQgeyBUZXh0U291cmNlIH0gZnJvbSBcIi4vdGV4dC1zb3VyY2VcIjtcclxuZXhwb3J0IGNsYXNzIFRleHRTZWxlY3RvciB7XHJcbiAgICBnZXRTb3VyY2VVbmRlckN1cnNvcihldmVudCkge1xyXG4gICAgICAgIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY2FyZXRQb3NpdGlvbkZyb21Qb2ludChldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcclxuICAgICAgICBjb25zdCB0ZXh0Tm9kZSA9IHJhbmdlLm9mZnNldE5vZGU7XHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gcmFuZ2Uub2Zmc2V0O1xyXG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IG5ldyBUZXh0U291cmNlKHRleHROb2RlLCBvZmZzZXQpO1xyXG4gICAgICAgIHJldHVybiBzb3VyY2U7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgV2lraUFwaSB9IGZyb20gXCIuL2FwaS93aWtpYXBpXCI7XHJcbmltcG9ydCB7IFRleHRTZWxlY3RvciB9IGZyb20gXCIuL2RvYy1iaW5kL3RleHQtc2VsZWN0b3JcIjtcclxuY2xhc3MgV2lraWNoYW4ge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy53aWtpYyA9IG5ldyBXaWtpQXBpKCk7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IG5ldyBUZXh0U2VsZWN0b3IoKTtcclxuICAgIH1cclxuICAgIHByZXBhcmUoKSB7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZU92ZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgLy8gd2luZG93Lndpa2lmcmFtZSA9IG5ldyBSZXNwb25zZURpc3BsYXkoMCwgMCwgMCwgMCk7XHJcbiAgICB9XHJcbiAgICBvbk1vdXNlT3ZlcihlKSB7XHJcbiAgICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5zZWxlY3Rvci5nZXRTb3VyY2VVbmRlckN1cnNvcihlKTtcclxuICAgICAgICBsZXQgcmVzcG9uc2VzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgYmVmb3JlID0gMDsgYmVmb3JlIDwgNDsgYmVmb3JlKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgYWZ0ZXIgPSAwOyBhZnRlciA8IDQ7IGFmdGVyKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud2lraWMuZmV0Y2hFeHRyYWN0KHNvdXJjZS5waHJhc2UoYmVmb3JlLCBhZnRlcikpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVzcG9uc2VzLnB1c2gocmVzKTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZS5zdGFjayk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCB3aWtpY2hhbiA9IG5ldyBXaWtpY2hhbigpO1xyXG53aWtpY2hhbi5wcmVwYXJlKCk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=