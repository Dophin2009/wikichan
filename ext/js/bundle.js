!function(t){var e={};function r(s){if(e[s])return e[s].exports;var i=e[s]={i:s,l:!1,exports:{}};return t[s].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,s){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(s,i,function(e){return t[e]}.bind(null,i));return s},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);class s{constructor(t,e){this._key=t,this._value=e}get key(){return this._key}set key(t){this._key=t}get value(){return this._value}set value(t){this._value=t}}class i{constructor(t,e){this.endpoint=t,this.params=new Array,this._type=e,this.addParam("origin","*").addParam("format","json")}addParam(t,e){const r=new s(t,e);return this.params.push(r),this}get url(){let t=this.endpoint;return this.params.forEach(e=>{t+=e.key+"="+e.value+"&"}),t}get type(){return this._type}}var n;!function(t){t[t.EXTRACT=0]="EXTRACT"}(n||(n={}));class o{constructor(){this._redirects=[],this._pages=[]}addRedirect(t){this._redirects.push(t)}addPage(t){this._pages.push(t)}get redirects(){return this._redirects}get pages(){return this._pages}static fromJson(t){const e=new o;return t.normalized&&t.normalized.forEach(t=>{e.addRedirect(h.fromJson(t))}),t.redirects&&t.redirects.forEach(t=>{e.addRedirect(h.fromJson(t))}),Object.keys(t.pages).forEach((r,s)=>{+r<0||e.addPage(a.fromJson(t.pages[r]))}),e}}class a{constructor(){}get id(){return this._id}get title(){return this._title}get summary(){return this._summary}static fromJson(t){const e=new a;return e._id=t.pageid,e._title=t.title,e._summary=t.extract,e}}class h{constructor(){}get from(){return this._from}get to(){return this._to}static fromJson(t){const e=new h;return e._from=t.from,e._to=t.to,e}}var c=function(t,e,r,s){return new(r||(r=Promise))(function(i,n){function o(t){try{h(s.next(t))}catch(t){n(t)}}function a(t){try{h(s.throw(t))}catch(t){n(t)}}function h(t){t.done?i(t.value):new r(function(e){e(t.value)}).then(o,a)}h((s=s.apply(t,e||[])).next())})};class u{constructor(){this.endpoint="https://en.wikipedia.org/w/api.php?"}fetchExtract(t){return c(this,void 0,void 0,function*(){const e=this.constructQuery(t,n.EXTRACT);return new Promise(function(t,r){const s=new XMLHttpRequest;s.open("GET",e.url),s.setRequestHeader("Content-Type","application/json; charset=UTF-8"),s.onloadend=function(){if(this.status>=200&&this.status<300){const e=JSON.parse(this.responseText).query;if(-1!==Object.keys(e.pages).indexOf("-1")&&1===Object.keys(e.pages).length)return;console.log(e.pages);const r=o.fromJson(e);t(r)}else r({status:this.status,statusText:this.statusText})},s.onerror=function(){r({status:this.status,statusText:this.statusText})},s.send()})})}constructQuery(t,e){let r=new i(this.endpoint,e);return r.addParam("action","query").addParam("prop","info|extracts").addParam("inprop","url").addParam("redirects","1").addParam("titles",t),r}}class d{constructor(t,e){this._leftNode=t,this._rightNode=t,this._text=t.textContent,this._offset=e}phrase(t,e){let r,s,i=this.offset;for(let e=0;e<t+1;e++){for(;i>0&&(i--," "!==this.text[i]););i<0&&this.joinBefore()}r=i,i=this.offset;for(let t=0;t<e+1;t++){for(;i<this.text.length&&(i++," "!==this.text[i]););i>this.text.length&&this.joinAfter()}return s=i,this.cleanString(this.text.substring(r,s))}cleanString(t){return t.replace("/[.,/#!$%^&*;:{}=-_`~()]/g","").trim()}joinAfter(){var t;this.rightNode=null===(t=this.rightNode).nextSibling?t.parentNode.nextSibling:t.nextSibling,this.addAfter(this.rightNode.textContent)}joinBefore(){var t;this.leftNode=null===(t=this.leftNode).previousSibling?t.parentNode.previousSibling:t.previousSibling,this.addBefore(this.leftNode.textContent)}addAfter(t){this.text+=t}addBefore(t){this.text=t+this.text,this.offset+=t.length}get text(){return this._text}set text(t){this._text=t}get offset(){return this._offset}set offset(t){this._offset=t}get leftNode(){return this._leftNode}set leftNode(t){this._leftNode=t}get rightNode(){return this._rightNode}set rightNode(t){this._rightNode=t}}class l{getSourceUnderCursor(t){const e=document.caretPositionFromPoint(t.clientX,t.clientY),r=e.offsetNode,s=e.offset;return new d(r,s)}}class f{constructor(){this._container=document.createElement("iframe"),this._container.src="data:text/html;charset=utf-8,"+encodeURI("<body>Foo</body>"),this._container.style.visibility="hidden",this._container.id="wikichan",this._container.style.width="300px",this._container.style.height="300px",this._container.style.position="fixed",document.body.appendChild(this._container)}show(){this._container.style.top=`${this.top}px`,this._container.style.left=`${this.left}px`,this._container.style.visibility="visible"}setLocation(t,e){this.top=e,this.left=t}get top(){return this._top}set top(t){this._top=t}get left(){return this._left}set left(t){this._left=t}get height(){return this._height}set height(t){this._height=t}get width(){return this._width}set width(t){this._width=t}}(new class{constructor(){this.wikic=new u,this.selector=new l}prepare(){window.addEventListener("mousedown",this.onMouseOver.bind(this)),window.wikiframe=new f}onMouseOver(t){const e=this.selector.getSourceUnderCursor(t);window.wikiframe.setLocation(t.clientX,t.clientY),window.wikiframe.show();for(let t=0;t<4;t++)for(let r=0;r<4;r++)this.wikic.fetchExtract(e.phrase(t,r)).then(function(t){},function(t){console.log(t.stack)})}}).prepare()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9wYXJhbXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9xdWVyeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL3Jlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL3NyYy9hcGkvd2lraWFwaS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZG9jLWJpbmQvdGV4dC1zb3VyY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RvYy1iaW5kL3RleHQtc2VsZWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Rpc3BsYXkvZGlzcGxheS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvd2lraWNoYW4udHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJXaWtpUXVlcnlQYXJhbXMiLCJbb2JqZWN0IE9iamVjdF0iLCJ0aGlzIiwiX2tleSIsIl92YWx1ZSIsInF1ZXJ5X1dpa2lRdWVyeSIsImVuZHBvaW50IiwidHlwZSIsInBhcmFtcyIsIkFycmF5IiwiX3R5cGUiLCJhZGRQYXJhbSIsInBhcmFtIiwicHVzaCIsInVybCIsInF1ZXJ5IiwiZm9yRWFjaCIsIldpa2lRdWVyeVR5cGUiLCJXaWtpUmVzcG9uc2UiLCJfcmVkaXJlY3RzIiwiX3BhZ2VzIiwicmVkaXJlY3RzIiwicGFnZXMiLCJqc29uIiwicmVzIiwibm9ybWFsaXplZCIsImFkZFJlZGlyZWN0IiwiV2lraVJlZGlyZWN0IiwiZnJvbUpzb24iLCJrZXlzIiwiayIsInYiLCJhZGRQYWdlIiwiV2lraVBhZ2UiLCJpZCIsIl9pZCIsInRpdGxlIiwiX3RpdGxlIiwic3VtbWFyeSIsIl9zdW1tYXJ5IiwicGFnZWlkIiwiZXh0cmFjdCIsImZyb20iLCJfZnJvbSIsInRvIiwiX3RvIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJ3aWtpYXBpX1dpa2lBcGkiLCJhcnRpY2xlTmFtZSIsImNvbnN0cnVjdFF1ZXJ5IiwiRVhUUkFDVCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJvbmxvYWRlbmQiLCJzdGF0dXMiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJpbmRleE9mIiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsInJlc3BvbnNlIiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJzZW5kIiwiYXJ0aWNsZSIsIlRleHRTb3VyY2UiLCJub2RlIiwib2Zmc2V0IiwiX2xlZnROb2RlIiwiX3JpZ2h0Tm9kZSIsIl90ZXh0IiwidGV4dENvbnRlbnQiLCJfb2Zmc2V0IiwiYmVmb3JlIiwiYWZ0ZXIiLCJiZWdpbiIsImVuZCIsInRleHQiLCJqb2luQmVmb3JlIiwiam9pbkFmdGVyIiwiY2xlYW5TdHJpbmciLCJzdWJzdHJpbmciLCJyZXBsYWNlIiwidHJpbSIsInJpZ2h0Tm9kZSIsIm5leHRTaWJsaW5nIiwicGFyZW50Tm9kZSIsImFkZEFmdGVyIiwibGVmdE5vZGUiLCJwcmV2aW91c1NpYmxpbmciLCJhZGRCZWZvcmUiLCJ0ZXh0X3NlbGVjdG9yX1RleHRTZWxlY3RvciIsImV2ZW50IiwicmFuZ2UiLCJkb2N1bWVudCIsImNhcmV0UG9zaXRpb25Gcm9tUG9pbnQiLCJjbGllbnRYIiwiY2xpZW50WSIsInRleHROb2RlIiwib2Zmc2V0Tm9kZSIsIlJlc3BvbnNlRGlzcGxheSIsIl9jb250YWluZXIiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwiZW5jb2RlVVJJIiwic3R5bGUiLCJ2aXNpYmlsaXR5Iiwid2lkdGgiLCJoZWlnaHQiLCJwb3NpdGlvbiIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInRvcCIsImxlZnQiLCJ4IiwieSIsIl90b3AiLCJfbGVmdCIsIl9oZWlnaHQiLCJfd2lkdGgiLCJ3aWtpYyIsInNlbGVjdG9yIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uTW91c2VPdmVyIiwid2lraWZyYW1lIiwic291cmNlIiwiZ2V0U291cmNlVW5kZXJDdXJzb3IiLCJzZXRMb2NhdGlvbiIsInNob3ciLCJmZXRjaEV4dHJhY3QiLCJwaHJhc2UiLCJzdGFjayIsInByZXBhcmUiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFD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Q0E2SSxPQUFBQyxpQkFBQSxZQUFBN0ksS0FBQThJLFlBQUF4SixLQUFBVSxPQUNBNEksT0FBQUcsVUFBQSxJQUErQnpCLEVBRS9CdkgsWUFBQXdELEdBQ0EsTUFBQXlGLEVBQUFoSixLQUFBMkksU0FBQU0scUJBQUExRixHQUNBcUYsT0FBQUcsVUFBQUcsWUFBQTNGLEVBQUEyRCxRQUFBM0QsRUFBQTRELFNBQ0F5QixPQUFBRyxVQUFBSSxPQUNBLFFBQUF4RCxFQUFBLEVBQTRCQSxFQUFBLEVBQVlBLElBQ3hDLFFBQUFDLEVBQUEsRUFBK0JBLEVBQUEsRUFBV0EsSUFDMUM1RixLQUFBMEksTUFBQVUsYUFBQUosRUFBQUssT0FBQTFELEVBQUFDLElBQ0FqQyxLQUFBLFNBQUFyQyxLQUNpQixTQUFBaUMsR0FDakJxQixRQUFBQyxJQUFBdEIsRUFBQStGLFlBT0FDIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImV4cG9ydCBjbGFzcyBXaWtpUXVlcnlQYXJhbXMge1xyXG4gICAgY29uc3RydWN0b3Ioa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2tleSA9IGtleTtcclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGtleSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fa2V5O1xyXG4gICAgfVxyXG4gICAgc2V0IGtleSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2tleSA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuICAgIHNldCB2YWx1ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgV2lraVF1ZXJ5UGFyYW1zIH0gZnJvbSAnLi9wYXJhbXMnO1xyXG5leHBvcnQgY2xhc3MgV2lraVF1ZXJ5IHtcclxuICAgIGNvbnN0cnVjdG9yKGVuZHBvaW50LCB0eXBlKSB7XHJcbiAgICAgICAgdGhpcy5lbmRwb2ludCA9IGVuZHBvaW50O1xyXG4gICAgICAgIHRoaXMucGFyYW1zID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy5hZGRQYXJhbSgnb3JpZ2luJywgJyonKVxyXG4gICAgICAgICAgICAuYWRkUGFyYW0oJ2Zvcm1hdCcsICdqc29uJyk7XHJcbiAgICB9XHJcbiAgICBhZGRQYXJhbShrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgcGFyYW0gPSBuZXcgV2lraVF1ZXJ5UGFyYW1zKGtleSwgdmFsdWUpO1xyXG4gICAgICAgIHRoaXMucGFyYW1zLnB1c2gocGFyYW0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgZ2V0IHVybCgpIHtcclxuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLmVuZHBvaW50O1xyXG4gICAgICAgIHRoaXMucGFyYW1zLmZvckVhY2gocCA9PiB7XHJcbiAgICAgICAgICAgIHF1ZXJ5ICs9IHAua2V5ICsgXCI9XCIgKyBwLnZhbHVlICsgXCImXCI7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHF1ZXJ5O1xyXG4gICAgfVxyXG4gICAgZ2V0IHR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3R5cGU7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IHZhciBXaWtpUXVlcnlUeXBlO1xyXG4oZnVuY3Rpb24gKFdpa2lRdWVyeVR5cGUpIHtcclxuICAgIFdpa2lRdWVyeVR5cGVbV2lraVF1ZXJ5VHlwZVtcIkVYVFJBQ1RcIl0gPSAwXSA9IFwiRVhUUkFDVFwiO1xyXG59KShXaWtpUXVlcnlUeXBlIHx8IChXaWtpUXVlcnlUeXBlID0ge30pKTtcclxuIiwiZXhwb3J0IGNsYXNzIFdpa2lSZXNwb25zZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9yZWRpcmVjdHMgPSBbXTtcclxuICAgICAgICB0aGlzLl9wYWdlcyA9IFtdO1xyXG4gICAgfVxyXG4gICAgYWRkUmVkaXJlY3Qocikge1xyXG4gICAgICAgIHRoaXMuX3JlZGlyZWN0cy5wdXNoKHIpO1xyXG4gICAgfVxyXG4gICAgYWRkUGFnZShwKSB7XHJcbiAgICAgICAgdGhpcy5fcGFnZXMucHVzaChwKTtcclxuICAgIH1cclxuICAgIGdldCByZWRpcmVjdHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZGlyZWN0cztcclxuICAgIH1cclxuICAgIGdldCBwYWdlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcGFnZXM7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZnJvbUpzb24oanNvbikge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IG5ldyBXaWtpUmVzcG9uc2UoKTtcclxuICAgICAgICBpZiAoanNvbi5ub3JtYWxpemVkKSB7XHJcbiAgICAgICAgICAgIGpzb24ubm9ybWFsaXplZC5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzLmFkZFJlZGlyZWN0KFdpa2lSZWRpcmVjdC5mcm9tSnNvbihuKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoanNvbi5yZWRpcmVjdHMpIHtcclxuICAgICAgICAgICAganNvbi5yZWRpcmVjdHMuZm9yRWFjaChyID0+IHtcclxuICAgICAgICAgICAgICAgIHJlcy5hZGRSZWRpcmVjdChXaWtpUmVkaXJlY3QuZnJvbUpzb24ocikpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmtleXMoanNvbi5wYWdlcykuZm9yRWFjaCgoaywgdikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoK2sgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzLmFkZFBhZ2UoV2lraVBhZ2UuZnJvbUpzb24oanNvbi5wYWdlc1trXSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFdpa2lQYWdlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcbiAgICBnZXQgaWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfVxyXG4gICAgZ2V0IHRpdGxlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aXRsZTtcclxuICAgIH1cclxuICAgIGdldCBzdW1tYXJ5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdW1tYXJ5O1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGZyb21Kc29uKGpzb24pIHtcclxuICAgICAgICBjb25zdCByZXMgPSBuZXcgV2lraVBhZ2UoKTtcclxuICAgICAgICByZXMuX2lkID0ganNvbi5wYWdlaWQ7XHJcbiAgICAgICAgcmVzLl90aXRsZSA9IGpzb24udGl0bGU7XHJcbiAgICAgICAgcmVzLl9zdW1tYXJ5ID0ganNvbi5leHRyYWN0O1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgV2lraVJlZGlyZWN0IHtcclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcbiAgICBnZXQgZnJvbSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZnJvbTtcclxuICAgIH1cclxuICAgIGdldCB0bygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdG87XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZnJvbUpzb24oanNvbikge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IG5ldyBXaWtpUmVkaXJlY3QoKTtcclxuICAgICAgICByZXMuX2Zyb20gPSBqc29uLmZyb207XHJcbiAgICAgICAgcmVzLl90byA9IGpzb24udG87XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxufVxyXG4iLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5pbXBvcnQgeyBXaWtpUXVlcnlUeXBlLCBXaWtpUXVlcnkgfSBmcm9tICcuL3F1ZXJ5JztcclxuaW1wb3J0IHsgV2lraVJlc3BvbnNlIH0gZnJvbSAnLi9yZXNwb25zZSc7XHJcbmV4cG9ydCBjbGFzcyBXaWtpQXBpIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuZW5kcG9pbnQgPSAnaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3cvYXBpLnBocD8nO1xyXG4gICAgfVxyXG4gICAgZmV0Y2hFeHRyYWN0KGFydGljbGVOYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgY29uc3QgcXVlcnkgPSB0aGlzLmNvbnN0cnVjdFF1ZXJ5KGFydGljbGVOYW1lLCBXaWtpUXVlcnlUeXBlLkVYVFJBQ1QpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgICAgICB4aHIub3BlbignR0VUJywgcXVlcnkudXJsKTtcclxuICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCcpO1xyXG4gICAgICAgICAgICAgICAgeGhyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKHRoaXMucmVzcG9uc2VUZXh0KS5xdWVyeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGpzb24ucGFnZXMpLmluZGV4T2YoXCItMVwiKSAhPT0gLTEgJiYgT2JqZWN0LmtleXMoanNvbi5wYWdlcykubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coanNvbi5wYWdlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gV2lraVJlc3BvbnNlLmZyb21Kc29uKGpzb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3Qoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHRcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB4aHIuc2VuZCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vIFRPRE86IFJlZmFjdG9yIGZvciBkaWZmZXJlbnQgdHlwZXMgb2YgcXVlcmllc1xyXG4gICAgY29uc3RydWN0UXVlcnkoYXJ0aWNsZSwgdHlwZSkge1xyXG4gICAgICAgIGxldCBxdWVyeSA9IG5ldyBXaWtpUXVlcnkodGhpcy5lbmRwb2ludCwgdHlwZSk7XHJcbiAgICAgICAgcXVlcnkuYWRkUGFyYW0oJ2FjdGlvbicsICdxdWVyeScpXHJcbiAgICAgICAgICAgIC5hZGRQYXJhbSgncHJvcCcsICdpbmZvfGV4dHJhY3RzJylcclxuICAgICAgICAgICAgLmFkZFBhcmFtKCdpbnByb3AnLCAndXJsJylcclxuICAgICAgICAgICAgLmFkZFBhcmFtKCdyZWRpcmVjdHMnLCAnMScpXHJcbiAgICAgICAgICAgIC5hZGRQYXJhbSgndGl0bGVzJywgYXJ0aWNsZSk7XHJcbiAgICAgICAgcmV0dXJuIHF1ZXJ5O1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBUZXh0U291cmNlIHtcclxuICAgIGNvbnN0cnVjdG9yKG5vZGUsIG9mZnNldCkge1xyXG4gICAgICAgIHRoaXMuX2xlZnROb2RlID0gbm9kZTtcclxuICAgICAgICB0aGlzLl9yaWdodE5vZGUgPSBub2RlO1xyXG4gICAgICAgIHRoaXMuX3RleHQgPSBub2RlLnRleHRDb250ZW50O1xyXG4gICAgICAgIHRoaXMuX29mZnNldCA9IG9mZnNldDtcclxuICAgIH1cclxuICAgIHBocmFzZShiZWZvcmUsIGFmdGVyKSB7XHJcbiAgICAgICAgbGV0IGkgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICBsZXQgYmVnaW47XHJcbiAgICAgICAgbGV0IGVuZDtcclxuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGJlZm9yZSArIDE7IGsrKykge1xyXG4gICAgICAgICAgICB3aGlsZSAoaSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRleHRbaV0gPT09IFwiIFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5qb2luQmVmb3JlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgYmVnaW4gPSBpO1xyXG4gICAgICAgIGkgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGFmdGVyICsgMTsgaysrKSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChpIDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGV4dFtpXSA9PT0gXCIgXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGkgPiB0aGlzLnRleHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmpvaW5BZnRlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVuZCA9IGk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xlYW5TdHJpbmcodGhpcy50ZXh0LnN1YnN0cmluZyhiZWdpbiwgZW5kKSk7XHJcbiAgICB9XHJcbiAgICBjbGVhblN0cmluZyhzKSB7XHJcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZShcIi9bLixcXC8jISQlXFxeJlxcKjs6e309XFwtX2B+KCldL2dcIiwgXCJcIikudHJpbSgpO1xyXG4gICAgfVxyXG4gICAgam9pbkFmdGVyKCkge1xyXG4gICAgICAgIHRoaXMucmlnaHROb2RlID0gZ2V0TmV4dE5vZGUodGhpcy5yaWdodE5vZGUpO1xyXG4gICAgICAgIHRoaXMuYWRkQWZ0ZXIodGhpcy5yaWdodE5vZGUudGV4dENvbnRlbnQpO1xyXG4gICAgfVxyXG4gICAgam9pbkJlZm9yZSgpIHtcclxuICAgICAgICB0aGlzLmxlZnROb2RlID0gZ2V0UHJldmlvdXNOb2RlKHRoaXMubGVmdE5vZGUpO1xyXG4gICAgICAgIHRoaXMuYWRkQmVmb3JlKHRoaXMubGVmdE5vZGUudGV4dENvbnRlbnQpO1xyXG4gICAgfVxyXG4gICAgYWRkQWZ0ZXIodGV4dCkge1xyXG4gICAgICAgIHRoaXMudGV4dCArPSB0ZXh0O1xyXG4gICAgfVxyXG4gICAgYWRkQmVmb3JlKHRleHQpIHtcclxuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0ICsgdGhpcy50ZXh0O1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IHRleHQubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgZ2V0IHRleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHQ7XHJcbiAgICB9XHJcbiAgICBzZXQgdGV4dCh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX3RleHQgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGdldCBvZmZzZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29mZnNldDtcclxuICAgIH1cclxuICAgIHNldCBvZmZzZXQodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9vZmZzZXQgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGdldCBsZWZ0Tm9kZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGVmdE5vZGU7XHJcbiAgICB9XHJcbiAgICBzZXQgbGVmdE5vZGUodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9sZWZ0Tm9kZSA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHJpZ2h0Tm9kZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmlnaHROb2RlO1xyXG4gICAgfVxyXG4gICAgc2V0IHJpZ2h0Tm9kZSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX3JpZ2h0Tm9kZSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldE5leHROb2RlKG5vZGUpIHtcclxuICAgIHJldHVybiBub2RlLm5leHRTaWJsaW5nID09PSBudWxsID8gbm9kZS5wYXJlbnROb2RlLm5leHRTaWJsaW5nIDogbm9kZS5uZXh0U2libGluZztcclxufVxyXG5mdW5jdGlvbiBnZXRQcmV2aW91c05vZGUobm9kZSkge1xyXG4gICAgcmV0dXJuIG5vZGUucHJldmlvdXNTaWJsaW5nID09PSBudWxsID8gbm9kZS5wYXJlbnROb2RlLnByZXZpb3VzU2libGluZyA6IG5vZGUucHJldmlvdXNTaWJsaW5nO1xyXG59XHJcbiIsImltcG9ydCB7IFRleHRTb3VyY2UgfSBmcm9tIFwiLi90ZXh0LXNvdXJjZVwiO1xyXG5leHBvcnQgY2xhc3MgVGV4dFNlbGVjdG9yIHtcclxuICAgIGdldFNvdXJjZVVuZGVyQ3Vyc29yKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBkb2N1bWVudC5jYXJldFBvc2l0aW9uRnJvbVBvaW50KGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xyXG4gICAgICAgIGNvbnN0IHRleHROb2RlID0gcmFuZ2Uub2Zmc2V0Tm9kZTtcclxuICAgICAgICBjb25zdCBvZmZzZXQgPSByYW5nZS5vZmZzZXQ7XHJcbiAgICAgICAgY29uc3Qgc291cmNlID0gbmV3IFRleHRTb3VyY2UodGV4dE5vZGUsIG9mZnNldCk7XHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgUmVzcG9uc2VEaXNwbGF5IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5zcmMgPSAnZGF0YTp0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCwnXHJcbiAgICAgICAgICAgICsgZW5jb2RlVVJJKGA8Ym9keT5Gb288L2JvZHk+YCk7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuICAgICAgICB0aGlzLl9jb250YWluZXIuaWQgPSBcIndpa2ljaGFuXCI7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnN0eWxlLndpZHRoID0gJzMwMHB4JztcclxuICAgICAgICB0aGlzLl9jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gJzMwMHB4JztcclxuICAgICAgICB0aGlzLl9jb250YWluZXIuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fY29udGFpbmVyKTtcclxuICAgIH1cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnN0eWxlLnRvcCA9IGAke3RoaXMudG9wfXB4YDtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIuc3R5bGUubGVmdCA9IGAke3RoaXMubGVmdH1weGA7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgICB9XHJcbiAgICBzZXRMb2NhdGlvbih4LCB5KSB7XHJcbiAgICAgICAgdGhpcy50b3AgPSB5O1xyXG4gICAgICAgIHRoaXMubGVmdCA9IHg7XHJcbiAgICB9XHJcbiAgICBnZXQgdG9wKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90b3A7XHJcbiAgICB9XHJcbiAgICBzZXQgdG9wKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fdG9wID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBnZXQgbGVmdCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGVmdDtcclxuICAgIH1cclxuICAgIHNldCBsZWZ0KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fbGVmdCA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGhlaWdodCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgc2V0IGhlaWdodCh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2hlaWdodCA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHdpZHRoKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl93aWR0aDtcclxuICAgIH1cclxuICAgIHNldCB3aWR0aCh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX3dpZHRoID0gdmFsdWU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgV2lraUFwaSB9IGZyb20gXCIuL2FwaS93aWtpYXBpXCI7XHJcbmltcG9ydCB7IFRleHRTZWxlY3RvciB9IGZyb20gXCIuL2RvYy1iaW5kL3RleHQtc2VsZWN0b3JcIjtcclxuaW1wb3J0IHsgUmVzcG9uc2VEaXNwbGF5IH0gZnJvbSBcIi4vZGlzcGxheS9kaXNwbGF5XCI7XHJcbmNsYXNzIFdpa2ljaGFuIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMud2lraWMgPSBuZXcgV2lraUFwaSgpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBuZXcgVGV4dFNlbGVjdG9yKCk7XHJcbiAgICB9XHJcbiAgICBwcmVwYXJlKCkge1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VPdmVyLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHdpbmRvdy53aWtpZnJhbWUgPSBuZXcgUmVzcG9uc2VEaXNwbGF5KCk7XHJcbiAgICB9XHJcbiAgICBvbk1vdXNlT3ZlcihlKSB7XHJcbiAgICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5zZWxlY3Rvci5nZXRTb3VyY2VVbmRlckN1cnNvcihlKTtcclxuICAgICAgICB3aW5kb3cud2lraWZyYW1lLnNldExvY2F0aW9uKGUuY2xpZW50WCwgZS5jbGllbnRZKTtcclxuICAgICAgICB3aW5kb3cud2lraWZyYW1lLnNob3coKTtcclxuICAgICAgICBmb3IgKGxldCBiZWZvcmUgPSAwOyBiZWZvcmUgPCA0OyBiZWZvcmUrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBhZnRlciA9IDA7IGFmdGVyIDwgNDsgYWZ0ZXIrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53aWtpYy5mZXRjaEV4dHJhY3Qoc291cmNlLnBocmFzZShiZWZvcmUsIGFmdGVyKSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUuc3RhY2spO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuY29uc3Qgd2lraWNoYW4gPSBuZXcgV2lraWNoYW4oKTtcclxud2lraWNoYW4ucHJlcGFyZSgpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9