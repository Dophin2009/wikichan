!function(t){var e={};function r(i){if(e[i])return e[i].exports;var s=e[i]={i:i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(i,s,function(e){return t[e]}.bind(null,s));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){r(2),t.exports=r(1)},function(t,e,r){},function(t,e,r){"use strict";r.r(e);class i{constructor(t,e){this._key=t,this._value=e}get key(){return this._key}set key(t){this._key=t}get value(){return this._value}set value(t){this._value=t}}class s{constructor(t,e){this.endpoint=t,this.params=new Array,this._type=e,this.addParam("origin","*").addParam("format","json")}addParam(t,e){const r=new i(t,e);return this.params.push(r),this}get url(){let t=this.endpoint;return this.params.forEach(e=>{t+=e.key+"="+e.value+"&"}),t}get type(){return this._type}}var n;!function(t){t[t.EXTRACT=0]="EXTRACT"}(n||(n={}));class o{constructor(){this._redirects=[],this._pages=[]}addRedirect(t){this._redirects.push(t)}addPage(t){this._pages.push(t)}get redirects(){return this._redirects}get pages(){return this._pages}static fromJson(t){const e=new o;return t.normalized&&t.normalized.forEach(t=>{e.addRedirect(h.fromJson(t))}),t.redirects&&t.redirects.forEach(t=>{e.addRedirect(h.fromJson(t))}),Object.keys(t.pages).forEach((r,i)=>{+r<0||e.addPage(a.fromJson(t.pages[r]))}),e}}class a{constructor(){}get id(){return this._id}get title(){return this._title}get summary(){return this._summary}static fromJson(t){const e=new a;return e._id=t.pageid,e._title=t.title,e._summary=t.extract,e}}class h{constructor(){}get from(){return this._from}get to(){return this._to}static fromJson(t){const e=new h;return e._from=t.from,e._to=t.to,e}}var c=function(t,e,r,i){return new(r||(r=Promise))(function(s,n){function o(t){try{h(i.next(t))}catch(t){n(t)}}function a(t){try{h(i.throw(t))}catch(t){n(t)}}function h(t){t.done?s(t.value):new r(function(e){e(t.value)}).then(o,a)}h((i=i.apply(t,e||[])).next())})};class u{constructor(){this.endpoint="https://en.wikipedia.org/w/api.php?"}fetchExtract(t){return c(this,void 0,void 0,function*(){const e=this.constructQuery(t,n.EXTRACT);return new Promise(function(t,r){const i=new XMLHttpRequest;i.open("GET",e.url),i.setRequestHeader("Content-Type","application/json; charset=UTF-8"),i.onloadend=function(){if(this.status>=200&&this.status<300){const e=JSON.parse(this.responseText).query;if(-1!==Object.keys(e.pages).indexOf("-1")&&1===Object.keys(e.pages).length)return;console.log(e.pages);const r=o.fromJson(e);t(r)}else r({status:this.status,statusText:this.statusText})},i.onerror=function(){r({status:this.status,statusText:this.statusText})},i.send()})})}constructQuery(t,e){let r=new s(this.endpoint,e);return r.addParam("action","query").addParam("prop","info|extracts").addParam("inprop","url").addParam("redirects","1").addParam("titles",t),r}}class d{constructor(t,e){this._leftNode=t,this._rightNode=t,this._text=t.textContent,this._offset=e}phrase(t,e){let r,i,s=this.offset;for(let e=0;e<t+1;e++){for(;s>0&&(s--," "!==this.text[s]););s<0&&this.joinBefore()}r=s,s=this.offset;for(let t=0;t<e+1;t++){for(;s<this.text.length&&(s++," "!==this.text[s]););s>this.text.length&&this.joinAfter()}return i=s,this.cleanString(this.text.substring(r,i))}cleanString(t){return t.replace("/[.,/#!$%^&*;:{}=-_`~()]/g","").trim()}joinAfter(){var t;this.rightNode=null===(t=this.rightNode).nextSibling?t.parentNode.nextSibling:t.nextSibling,this.addAfter(this.rightNode.textContent)}joinBefore(){var t;this.leftNode=null===(t=this.leftNode).previousSibling?t.parentNode.previousSibling:t.previousSibling,this.addBefore(this.leftNode.textContent)}addAfter(t){this.text+=t}addBefore(t){this.text=t+this.text,this.offset+=t.length}get text(){return this._text}set text(t){this._text=t}get offset(){return this._offset}set offset(t){this._offset=t}get leftNode(){return this._leftNode}set leftNode(t){this._leftNode=t}get rightNode(){return this._rightNode}set rightNode(t){this._rightNode=t}}class f{getSourceUnderCursor(t){const e=document.caretPositionFromPoint(t.clientX,t.clientY),r=e.offsetNode,i=e.offset;return new d(r,i)}}class l{constructor(){this._container=document.createElement("iframe"),this._container.src=browser.runtime.getURL("frame.html"),this._container.style.visibility="hidden",this._container.id="wikichan",this._container.style.width="300px",this._container.style.height="300px",this._container.style.position="fixed",document.body.appendChild(this._container)}show(){this._container.style.top=`${this.top}px`,this._container.style.left=`${this.left}px`,this._container.style.visibility="visible"}setLocation(t,e){this.top=e,this.left=t}get top(){return this._top}set top(t){this._top=t}get left(){return this._left}set left(t){this._left=t}get height(){return this._height}set height(t){this._height=t}get width(){return this._width}set width(t){this._width=t}}(new class{constructor(){this.wikic=new u,this.selector=new f}prepare(){window.addEventListener("mousedown",this.onMouseOver.bind(this)),window.wikiframe=new l}onMouseOver(t){const e=this.selector.getSourceUnderCursor(t);window.wikiframe.setLocation(t.clientX,t.clientY),window.wikiframe.show();for(let t=0;t<4;t++)for(let r=0;r<4;r++)this.wikic.fetchExtract(e.phrase(t,r)).then(function(t){},function(t){console.log(t.stack)})}}).prepare()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,