!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),o=n(1);(new(function(){function e(){this.wikic=new r.WikiApi}return e.prototype.prepare=function(){window.addEventListener("mousedown",this.onMouseOver.bind(this))},e.prototype.onMouseOver=function(e){for(var t=o.getSourceUnderCursor(e),n=[],r=0;r<4;r++)for(var i=0;i<4;i++)this.wikic.fetchExtract(t.phrase(r,i)).then(function(e){console.log(e),n.push(e)},function(e){console.log(e.stack)})},e}())).prepare()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5);t.getSourceUnderCursor=function(e){var t=document.caretPositionFromPoint(e.clientX,e.clientY),n=t.offsetNode,o=t.offset;return new r.TextSource(n,o)}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function u(e){try{a(r.next(e))}catch(e){i(e)}}function s(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(u,s)}a((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=(o=u.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(3),u=n(4),s=function(){function e(){this.endpoint="https://en.wikipedia.org/w/api.php?"}return e.prototype.fetchExtract=function(e){return r(this,void 0,void 0,function(){var t;return o(this,function(n){return(t=new i.WikiApiQuery(this.endpoint)).addParam("action","query").addParam("prop","extracts&exintro&explaintext").addParam("redirects","1").addParam("origin","*").addParam("titles",e).addParam("format","json"),[2,new Promise(function(e,n){var r=new XMLHttpRequest;r.open("GET",t.url),r.setRequestHeader("Content-Type","application/json; charset=UTF-8"),r.onloadend=function(){if(this.status>=200&&this.status<300){var t=JSON.parse(this.responseText).query;if(-1!==Object.keys(t.pages).indexOf("-1")&&1===Object.keys(t.pages).length)return;var r=u.WikiApiResponse.fromJson(t);e(r)}else n({status:this.status,statusText:this.statusText})},r.onerror=function(){n({status:this.status,statusText:this.statusText})},r.send()})]})})},e}();t.WikiApi=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.endpoint=e,this.params=new Array}return e.prototype.addParam=function(e,t){var n=new o(e,t);return this.params.push(n),this},Object.defineProperty(e.prototype,"url",{get:function(){var e=this.endpoint;return this.params.forEach(function(t){e+=t.key+"="+t.value+"&"}),e},enumerable:!0,configurable:!0}),e}();t.WikiApiQuery=r;var o=function(){function e(e,t){this._key=e,this._value=t}return Object.defineProperty(e.prototype,"key",{get:function(){return this._key},set:function(e){this._key=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this._value},set:function(e){this._value=e},enumerable:!0,configurable:!0}),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this._redirects=[],this._pages=[]}return e.prototype.addRedirect=function(e){this._redirects.push(e)},e.prototype.addPage=function(e){this._pages.push(e)},Object.defineProperty(e.prototype,"redirects",{get:function(){return this._redirects},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pages",{get:function(){return this._pages},enumerable:!0,configurable:!0}),e.fromJson=function(t){var n=new e;return t.normalized&&t.normalized.forEach(function(e){n.addRedirect(i.fromJson(e))}),t.redirects&&t.redirects.forEach(function(e){n.addRedirect(i.fromJson(e))}),Object.keys(t.pages).forEach(function(e,r){+e<0||n.addPage(o.fromJson(t.pages[e]))}),n},e}();t.WikiApiResponse=r;var o=function(){function e(){}return Object.defineProperty(e.prototype,"id",{get:function(){return this._id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"title",{get:function(){return this._title},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"summary",{get:function(){return this._summary},enumerable:!0,configurable:!0}),e.fromJson=function(t){var n=new e;return n._id=t.pageid,n._title=t.title,n._summary=t.extract,n},e}();t.WikiPage=o;var i=function(){function e(){}return Object.defineProperty(e.prototype,"from",{get:function(){return this._from},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"to",{get:function(){return this._to},enumerable:!0,configurable:!0}),e.fromJson=function(t){var n=new e;return n._from=t.from,n._to=t.to,n},e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this._leftNode=e,this._rightNode=e,this._text=e.textContent,this._offset=t}return e.prototype.phrase=function(e,t){for(var n,r,o=this.offset,i=0;i<e+1;i++){for(;o>0&&(o--," "!==this.text[o]););o<0&&this.joinBefore()}n=o,o=this.offset;for(i=0;i<t+1;i++){for(;o<this.text.length&&(o++," "!==this.text[o]););o>this.text.length&&this.joinAfter()}return r=o,this.cleanString(this.text.substring(n,r).trim())},e.prototype.cleanString=function(e){return e.replace("/[.,/#!$%^&*;:{}=-_`~()]/g","")},e.prototype.joinAfter=function(){var e;this.rightNode=null===(e=this.rightNode).nextSibling?e.parentNode.nextSibling:e.nextSibling,this.addAfter(this.rightNode.textContent)},e.prototype.joinBefore=function(){var e;this.leftNode=null===(e=this.leftNode).previousSibling?e.parentNode.previousSibling:e.previousSibling,this.addBefore(this.leftNode.textContent)},e.prototype.addAfter=function(e){this.text+=e},e.prototype.addBefore=function(e){this.text=e+this.text,this.offset+=e.length},Object.defineProperty(e.prototype,"text",{get:function(){return this._text},set:function(e){this._text=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"offset",{get:function(){return this._offset},set:function(e){this._offset=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"leftNode",{get:function(){return this._leftNode},set:function(e){this._leftNode=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rightNode",{get:function(){return this._rightNode},set:function(e){this._rightNode=e},enumerable:!0,configurable:!0}),e}();t.TextSource=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,