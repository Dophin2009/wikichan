!function(t){var e={};function o(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=o(1);window.addEventListener("mousedown",function(t){var e=document.caretPositionFromPoint(t.clientX,t.clientY),o=e.offsetNode,r=e.offset,i=new n.TextSource(o,r);console.log(i.phrase(2,2))})},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){this._leftNode=t,this._rightNode=t,this._text=t.textContent,this._offset=e}return t.prototype.phrase=function(t,e){for(var o,n,r=this.offset,i=0;i<t+1;i++){for(;r>0&&(r--," "!==this.text[r]););0===r&&this.joinBefore()}o=r,r=this.offset;for(i=0;i<e+1;i++){for(;r<this.text.length&&(r++," "!==this.text[r]););r===this.text.length&&this.joinAfter()}return n=r,this.text.substring(o,n).trim()},t.prototype.joinAfter=function(){var t;this.rightNode=null===(t=this.rightNode).nextSibling?t.parentNode.nextSibling:t.nextSibling,this.addAfter(this.rightNode.textContent)},t.prototype.joinBefore=function(){var t;this.leftNode=null===(t=this.leftNode).previousSibling?t.parentNode.previousSibling:t.previousSibling,this.addBefore(this.leftNode.textContent)},t.prototype.addAfter=function(t){this.text+=t},t.prototype.addBefore=function(t){this.text=t+this.text,this.offset+=t.length},Object.defineProperty(t.prototype,"text",{get:function(){return this._text},set:function(t){this._text=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"offset",{get:function(){return this._offset},set:function(t){this._offset=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"leftNode",{get:function(){return this._leftNode},set:function(t){this._leftNode=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"rightNode",{get:function(){return this._rightNode},set:function(t){this._rightNode=t},enumerable:!0,configurable:!0}),t}();e.TextSource=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,